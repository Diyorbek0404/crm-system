'use strict'; // Import

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var _require2 = require('taskgroup'),
    TaskGroup = _require2.TaskGroup;

var unbounded = require('unbounded'); // Fetch raw listeners across versions
// Node v10 defines this on the EventEmitter prototype
// Node v8 omits this
// Node version below 8 don't need this, as their `listeners` function is the same as this
// However, due to the inconsistencies, this is what we have


function rawListeners(eventName) {
  var events = this._events[eventName];
  if (events == null) return [];
  if (typeof events === 'function') return [events];
  return events;
}
/**
Events EventEmitter to allow you to execute events in serial or parallel.
Made possible thanks to TaskGroup.

Inherits from https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter

Uses https://github.com/bevry/taskgroup

@class EventEmitterGrouped
@extends EventEmitter
@constructor
@access public
*/


var EventEmitterGrouped =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(EventEmitterGrouped, _EventEmitter);

  function EventEmitterGrouped() {
    _classCallCheck(this, EventEmitterGrouped);

    return _possibleConstructorReturn(this, _getPrototypeOf(EventEmitterGrouped).apply(this, arguments));
  }

  _createClass(EventEmitterGrouped, [{
    key: "getListenerGroup",

    /**
    Get a TaskGroup for a particular event.
    For each listener, treat them as Tasks within a TaskGroup, and return the TaskGroup.
    @param {string} eventName
    @param {...*} args - the arguments to forward to each task, with the last one being a completion callback with signature `error, results`
    @returns {TaskGroup}
    @access public
    */
    value: function getListenerGroup(eventName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // Get listeners
      var next = args.pop();
      var me = this; // Prepare tasks

      var tasks = new TaskGroup("EventEmitterGrouped for ".concat(eventName)).done(next); // Convert the listeners into objects that we can use

      var listenerObjects = (this.rawListeners || rawListeners).call(this, eventName).slice().map(function (listener) {
        // The `once` method will actually wrap around the original listener, which isn't what we want for the introspection
        // So we must pass fireWithOptionalCallback an array of the method to fire, and the method to introspect
        // https://github.com/bevry/docpad/issues/462
        // https://github.com/joyent/node/commit/d1b4dcd6acb1d1c66e423f7992dc6eec8a35c544
        var method = listener.listener ? unbounded.binder.call(unbounded.define(listener, listener.listener), me) : unbounded.binder.call(listener, me);
        var length = method.unbounded.length;
        var priority = method.unbounded.priority || 0;
        var name = method.unbounded.name;
        var description = "Listener for [".concat(eventName, "] with name [").concat(name, "], length [").concat(length, "], priority [").concat(priority, "]");
        var result = {
          method: method,
          length: length,
          priority: priority,
          name: name,
          description: description
        }; // Return

        return result;
      }); // Sort the listeners by highest priority first

      listenerObjects.sort(function (a, b) {
        return b.priority - a.priority;
      }); // Add the tasks for the listeners

      listenerObjects.forEach(function (_ref) {
        var description = _ref.description,
            method = _ref.method;
        // Bind to the task
        tasks.addTask(description, {
          method: method,
          args: args,
          ambi: true
        });
      }); // Return

      return tasks;
    }
    /**
    Refer to EventEmitter#removeListener
    https://nodejs.org/dist/latest/docs/api/events.html#events_emitter_removelistener_eventname_listener
    @returns {*} whatever removeListener returns
    @access public
    */

  }, {
    key: "off",
    value: function off() {
      return this.removeListener.apply(this, arguments);
    }
    /**
    Runs the listener group for the event in serial mode (one at a time)
    @param {...*} args - forwarded to {@link EventEmitterGrouped#getListenerGroup}
    @returns {TaskGroup}
    */

  }, {
    key: "emitSerial",
    value: function emitSerial() {
      return this.getListenerGroup.apply(this, arguments).run();
    }
    /**
    Runs the listener group for the event in parallel mode (multiple at a time)
    @param {...*} args - forwarded to {@link EventEmitterGrouped#getListenerGroup}
    @returns {TaskGroup}
    */

  }, {
    key: "emitParallel",
    value: function emitParallel() {
      return this.getListenerGroup.apply(this, arguments).setConfig({
        concurrency: 0
      }).run();
    }
  }]);

  return EventEmitterGrouped;
}(EventEmitter); // Export


EventEmitterGrouped.EventEmitterGrouped = EventEmitterGrouped; // backwards compatability

module.exports = EventEmitterGrouped;